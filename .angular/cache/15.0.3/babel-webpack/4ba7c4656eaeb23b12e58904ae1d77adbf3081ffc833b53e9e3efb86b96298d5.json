{"ast":null,"code":"import { of } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    constructor(messageService, http) {\n      this.messageService = messageService;\n      this.http = http;\n      this.heroesUrl = \"api/heroes\"; // URL to web api\n    }\n\n    getHeroes() {\n      this.messageService.add(\"HeroService: fetched heroes\");\n      return this.http.get(this.heroesUrl).pipe(tap(_ => this.log(\"fetched heroes\")), catchError(this.handleError(\"getHeroes\", [])));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     *\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n    handleError(operation = \"operation\", result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    getHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      this.messageService.add(`HeroService: fetched hero id=${id}`);\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n    }\n    /** Log a HeroService message with the MessageService */\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n  }\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}